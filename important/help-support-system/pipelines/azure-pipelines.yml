trigger:
  branches:
    include:
    - develop
  paths:
    include:
      - src/
      - pipelines/azure-pipelines.yml
parameters:
  - name: environment
    displayName: Where to deploy?
    type: string
    default: dev
    values:
    - prod
    - dev
  - name: imageTag
    displayName: Docker image tag
    type: string
    default: latest
    
variables:
- group: ${{parameters.environment}}-variable-group
- name: env
  value: ${{parameters.environment}}
- name: imageTag
  value: ${{parameters.imageTag}}

pool:
  name: Azure Pipelines
  vmImage: 'ubuntu-latest'

stages:
- stage: ScanAndTest
  displayName: Run Code Scan & Test # Human-readable name for the stage. 
  jobs:
    ## need include tests step
  - job: runTests
    displayName: Run Tests # Human-readable name for the job. 
    timeoutInMinutes: 5

    steps:
    - task: Bash@3
      displayName: 'Run Unit Tests'
      inputs:
        targetType: 'inline'
        script: |
          dotnet test
        workingDirectory: 'src/backend'
    #Multi-configuration and multi-agent job options are not exported to YAML. Configure these options using documentation guidance: https://docs.microsoft.com/vsts/pipelines/process/phases

- stage: BuildImages
  displayName: Build Docker Images # Human-readable name for the stage. 
  dependsOn:
  - ScanAndTest
  condition: eq(dependencies.ScanAndTest.result, 'Succeeded')
  jobs:
  - job: buildAndPush
    displayName: Build and Push Images # Human-readable name for the job. 
    timeoutInMinutes: 10

    steps:
    - task: Docker@2
      displayName: 'Build IDP image'
      inputs:
        containerRegistry: sharedacr
        repository: 'hss-idp-api'
        Dockerfile: 'src/backend/HSS.IdentityServer/Dockerfile'
        buildContext: 'src/backend'
        tags: '$(imageTag)'

    - task: Docker@2
      displayName: 'Build Hub image'
      inputs:
        containerRegistry: sharedacr
        repository: 'hss-hub-api'
        Dockerfile: 'src/backend/HSS.HubServer/Dockerfile'
        buildContext: 'src/backend'
        tags: '$(imageTag)'

    - task: Docker@2
      displayName: 'Build Message image'
      inputs:
        containerRegistry: sharedacr
        repository: 'hss-message-api'
        Dockerfile: 'src/backend/HSS.MessageApi/Dockerfile'
        buildContext: 'src/backend'
        tags: '$(imageTag)'

    - task: Docker@2
      displayName: 'Build User image'
      inputs:
        containerRegistry: sharedacr
        repository: 'hss-user-api'
        Dockerfile: 'src/backend/HSS.UserApi/Dockerfile'
        buildContext: 'src/backend'
        tags: '$(imageTag)'

- stage: ApplyTerraform
  displayName: Apply Terraform Changes # Human-readable name for the stage. 
  dependsOn:
  - BuildImages
  condition: in(dependencies.BuildImages.result, 'Succeeded', 'Skipped')
  jobs:
  - job: provisioningInfrastructure
    displayName: Apply infrastructure # Human-readable name for the job. 
    timeoutInMinutes: 30

    steps:
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Use Terraform latest'

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform initial'
      inputs:
        command: init
        workingDirectory: 'devops/aks/terraform/profiles/$(env)'
        backendType: azurerm
        backendServiceArm: 'azure connection'
        backendAzureRmSubscriptionId: '$(ARM_SUBSCRIPTION_ID)'
        backendAzureRmResourceGroupName: 'configuration-rg'
        backendAzureRmStorageAccountName: configstoragefelix
        backendAzureRmContainerName: tfstate
        backendAzureRmKey: 'hss-$(env).nginx.tfstate'

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform plan'
      inputs:
        command: plan
        workingDirectory: 'devops/aks/terraform/profiles/$(env)'
        environmentServiceName: 'azure connection'
        providerAzureRmSubscriptionId: '$(ARM_SUBSCRIPTION_ID)'
        runAzLogin: true
        backendServiceArm: 'azure connection'
        backendAzureRmSubscriptionId: '$(ARM_SUBSCRIPTION_ID)'
        backendAzureRmResourceGroupName: 'configuration-rg'
        backendAzureRmStorageAccountName: configstoragefelix
        backendAzureRmContainerName: tfstate
        backendAzureRmKey: 'hss-$(env).nginx.tfstate'
        publishPlanResults: 'hss-$(env)-plan'
        providerServiceAws: 'aws connection'
        providerAwsRegion: '$(AWS_DEFAULT_REGION)'

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform apply'
      inputs:
        command: apply
        workingDirectory: 'devops/aks/terraform/profiles/$(env)'
        environmentServiceName: 'azure connection'
        providerAzureRmSubscriptionId: '$(ARM_SUBSCRIPTION_ID)'
        runAzLogin: true
        commandOptions: '-auto-approve'
        providerServiceAws: 'aws connection'
        providerAwsRegion: '$(AWS_DEFAULT_REGION)'

- stage: DeployBasicServices
  displayName: Deploy Basic Services # Human-readable name for the stage. 
  dependsOn:
  - ApplyTerraform
  condition: in(dependencies.ApplyTerraform.result, 'Succeeded', 'Skipped')
  jobs:
  - job: deployServices
    displayName: Deploy Basic Services # Human-readable name for the job.
    timeoutInMinutes: 15

    steps:
    - task: AzureCLI@2
      displayName: 'Deploy Basic Charts'
      inputs:
        azureSubscription: 'azure connection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          sh basic_services.sh $(env) $(app)
        useGlobalConfig: true
        workingDirectory: 'devops/aks/services'

- stage: DeployMainServices
  displayName: Deploy Main Services # Human-readable name for the stage. 
  dependsOn:
  - BuildImages
  - ApplyTerraform
  - DeployBasicServices
  condition: |
    and
    (
      in(dependencies.DeployBasicServices.result, 'Succeeded', 'Skipped'),
      in(dependencies.BuildImages.result, 'Succeeded', 'Skipped'),
      in(dependencies.ApplyTerraform.result, 'Succeeded', 'Skipped')
    )
  jobs:
  - job: deployServices
    displayName: Deploy Main Services # Human-readable name for the job. 
    timeoutInMinutes: 15

    steps:
    - task: AzureCLI@2
      displayName: 'Replace Keys & Tags'
      inputs:
        azureSubscription: 'azure connection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          sed -i "s/imageVersion/$(imageTag)/" ./$(app)-chart/values_aks_$(env).yaml
          sed -i "s/connPlaceHolder/$(echo -n $(AppConnectionString) | base64 -w 0)/" ./$(app)-chart/values_aks_$(env).yaml
        workingDirectory: 'devops'

    - task: AzureCLI@2
      displayName: 'Deploy Main Charts'
      inputs:
        azureSubscription: 'azure connection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          sh main_services.sh $(env) $(app)
        useGlobalConfig: true
        workingDirectory: 'devops/aks/services'

