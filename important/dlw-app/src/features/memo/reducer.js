import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { SearchMemo } from '../../api/request';

// Distrct/Street/Community/MinPrice/MaxPrice/Version/SortKey/Page/Size
const initialState = {
  Criteria: {
    StartDate: '2022-01-01',
    EndDate: '2022-12-31',
  },

  Page: 1,
  Size: 2,

  MemoItems: [],
  DisplayedItems: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loadAsync = createAsyncThunk(
  'memo/Search',
  async (criteria) => {
    const response = await SearchMemo(criteria);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  },
);

export const memoSlice = createSlice({
  name: 'memo',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    saveCriteria(state, action) {
      state.MemoItems = [];
      state.Criteria = action.payload;
    },
    loadMore(state) {
      state.status = 'ready';
      state.Page += 1;
    },
    refreshData(state) {
      state.DisplayedItems = state.MemoItems.slice(0, state.Size * state.Page);
      state.status = 'idle';
    },
    clearAll(state) {
      state.Criteria = initialState.Criteria;
      state.Page = initialState.Page;
      state.Size = initialState.Size;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loadAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loadAsync.fulfilled, (state, action) => {
        const items = action.payload;
        state.status = 'idle';
        state.MemoItems = items;
      });
  },
});

export const {
  saveCriteria,
  clearAll,
  loadMore,
  refreshData,
} = memoSlice.actions;
export const currentCriteria = (state) => state.memo.Criteria;

export const currentItems = (state) => state.memo.MemoItems;
export const currentPage = (state) => state.memo.Page;
export const currentSize = (state) => state.memo.Size;

export const currentDisplayItems = (state) => state.memo.DisplayedItems;
export const loadingStatus = (state) => state.memo.status;

export default memoSlice.reducer;
