import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {GetProblems} from '../../../api/request'

const initialState = { 
    Criterias: [],
    Questions: [],
    ShowResult: false
};
// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loadAsync = createAsyncThunk(
    'criteria/GetProblems',
    async (criterias) => {
      const response = await GetProblems(criterias);
      // The value we return becomes the `fulfilled` action payload
      return response.data;
    }
  );

export const criteriaSlice = createSlice({
    name: 'criteria',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        saveCriterias(state, action) {
            state.Criterias.push(action.payload)
        },

        clearAll(state) {
            state.Criterias = []
            state.Questions = []
            state.ShowResult = false
            state.Score = 0
        },

        checkResult(state) {
            state.ShowResult = !state.ShowResult
        },

        submitResult(state) {
          const correct = state.Questions.filter(x=>x.Answer === x.UserAnswer).length
          const score = correct / state.Questions.length * 100
          state.Score = score
        },

        updateAnswer(state, action) {
          const {index, answer} = action.payload
          state.Questions.at(index).UserAnswer = answer
         },
         addCriteriaTemplate(state, action){
          const {type, count, max} = action.payload
          //todo tommorrow
          state.Criterias = []
         }
    },  
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(loadAsync.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(loadAsync.fulfilled, (state, action) => {
          state.status = 'idle';
          state.Questions = action.payload;
        });
    },
});

export const { clearAll, saveCriterias, checkResult, submitResult,updateAnswer,addCriteriaTemplate} = criteriaSlice.actions;
export const currentCriterias = (state) => state.criteria.Criterias;
export const currentQuestions = (state) => state.criteria.Questions;
export const currentShowResult = (state) => state.criteria.ShowResult;
export const currentScore = (state) => state.criteria.Score;

export default criteriaSlice.reducer;