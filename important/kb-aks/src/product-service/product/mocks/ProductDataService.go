// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	product "example.com/demo/product-service/product"
	mock "github.com/stretchr/testify/mock"
)

// ProductDataService is an autogenerated mock type for the ProductDataService type
type ProductDataService struct {
	mock.Mock
}

type ProductDataService_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductDataService) EXPECT() *ProductDataService_Expecter {
	return &ProductDataService_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields:
func (_m *ProductDataService) GetAll() []product.Product {
	ret := _m.Called()

	var r0 []product.Product
	if rf, ok := ret.Get(0).(func() []product.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Product)
		}
	}

	return r0
}

// ProductDataService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type ProductDataService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *ProductDataService_Expecter) GetAll() *ProductDataService_GetAll_Call {
	return &ProductDataService_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *ProductDataService_GetAll_Call) Run(run func()) *ProductDataService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProductDataService_GetAll_Call) Return(_a0 []product.Product) *ProductDataService_GetAll_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetById provides a mock function with given fields: id
func (_m *ProductDataService) GetById(id int) *product.Product {
	ret := _m.Called(id)

	var r0 *product.Product
	if rf, ok := ret.Get(0).(func(int) *product.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}

	return r0
}

// ProductDataService_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type ProductDataService_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//  - id int
func (_e *ProductDataService_Expecter) GetById(id interface{}) *ProductDataService_GetById_Call {
	return &ProductDataService_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *ProductDataService_GetById_Call) Run(run func(id int)) *ProductDataService_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *ProductDataService_GetById_Call) Return(_a0 *product.Product) *ProductDataService_GetById_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewProductDataService interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductDataService creates a new instance of ProductDataService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductDataService(t mockConstructorTestingTNewProductDataService) *ProductDataService {
	mock := &ProductDataService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
